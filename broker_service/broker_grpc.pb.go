// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: broker.proto

package broker_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WhereInformanteWrite_WhereExecuteCommand_FullMethodName = "/broker_service.WhereInformanteWrite/WhereExecuteCommand"
)

// WhereInformanteWriteClient is the client API for WhereInformanteWrite service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WhereInformanteWriteClient interface {
	WhereExecuteCommand(ctx context.Context, in *WhereCommandRequest, opts ...grpc.CallOption) (*WhereCommandReply, error)
}

type whereInformanteWriteClient struct {
	cc grpc.ClientConnInterface
}

func NewWhereInformanteWriteClient(cc grpc.ClientConnInterface) WhereInformanteWriteClient {
	return &whereInformanteWriteClient{cc}
}

func (c *whereInformanteWriteClient) WhereExecuteCommand(ctx context.Context, in *WhereCommandRequest, opts ...grpc.CallOption) (*WhereCommandReply, error) {
	out := new(WhereCommandReply)
	err := c.cc.Invoke(ctx, WhereInformanteWrite_WhereExecuteCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WhereInformanteWriteServer is the server API for WhereInformanteWrite service.
// All implementations must embed UnimplementedWhereInformanteWriteServer
// for forward compatibility
type WhereInformanteWriteServer interface {
	WhereExecuteCommand(context.Context, *WhereCommandRequest) (*WhereCommandReply, error)
	mustEmbedUnimplementedWhereInformanteWriteServer()
}

// UnimplementedWhereInformanteWriteServer must be embedded to have forward compatible implementations.
type UnimplementedWhereInformanteWriteServer struct {
}

func (UnimplementedWhereInformanteWriteServer) WhereExecuteCommand(context.Context, *WhereCommandRequest) (*WhereCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhereExecuteCommand not implemented")
}
func (UnimplementedWhereInformanteWriteServer) mustEmbedUnimplementedWhereInformanteWriteServer() {}

// UnsafeWhereInformanteWriteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhereInformanteWriteServer will
// result in compilation errors.
type UnsafeWhereInformanteWriteServer interface {
	mustEmbedUnimplementedWhereInformanteWriteServer()
}

func RegisterWhereInformanteWriteServer(s grpc.ServiceRegistrar, srv WhereInformanteWriteServer) {
	s.RegisterService(&WhereInformanteWrite_ServiceDesc, srv)
}

func _WhereInformanteWrite_WhereExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhereCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WhereInformanteWriteServer).WhereExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WhereInformanteWrite_WhereExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WhereInformanteWriteServer).WhereExecuteCommand(ctx, req.(*WhereCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WhereInformanteWrite_ServiceDesc is the grpc.ServiceDesc for WhereInformanteWrite service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhereInformanteWrite_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker_service.WhereInformanteWrite",
	HandlerType: (*WhereInformanteWriteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhereExecuteCommand",
			Handler:    _WhereInformanteWrite_WhereExecuteCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

const (
	InformanteWriteConflict_ReportWriteConflict_FullMethodName = "/broker_service.InformanteWriteConflict/ReportWriteConflict"
)

// InformanteWriteConflictClient is the client API for InformanteWriteConflict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformanteWriteConflictClient interface {
	ReportWriteConflict(ctx context.Context, in *InformanteConflictRequest, opts ...grpc.CallOption) (*InformanteConflictReply, error)
}

type informanteWriteConflictClient struct {
	cc grpc.ClientConnInterface
}

func NewInformanteWriteConflictClient(cc grpc.ClientConnInterface) InformanteWriteConflictClient {
	return &informanteWriteConflictClient{cc}
}

func (c *informanteWriteConflictClient) ReportWriteConflict(ctx context.Context, in *InformanteConflictRequest, opts ...grpc.CallOption) (*InformanteConflictReply, error) {
	out := new(InformanteConflictReply)
	err := c.cc.Invoke(ctx, InformanteWriteConflict_ReportWriteConflict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformanteWriteConflictServer is the server API for InformanteWriteConflict service.
// All implementations must embed UnimplementedInformanteWriteConflictServer
// for forward compatibility
type InformanteWriteConflictServer interface {
	ReportWriteConflict(context.Context, *InformanteConflictRequest) (*InformanteConflictReply, error)
	mustEmbedUnimplementedInformanteWriteConflictServer()
}

// UnimplementedInformanteWriteConflictServer must be embedded to have forward compatible implementations.
type UnimplementedInformanteWriteConflictServer struct {
}

func (UnimplementedInformanteWriteConflictServer) ReportWriteConflict(context.Context, *InformanteConflictRequest) (*InformanteConflictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWriteConflict not implemented")
}
func (UnimplementedInformanteWriteConflictServer) mustEmbedUnimplementedInformanteWriteConflictServer() {
}

// UnsafeInformanteWriteConflictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformanteWriteConflictServer will
// result in compilation errors.
type UnsafeInformanteWriteConflictServer interface {
	mustEmbedUnimplementedInformanteWriteConflictServer()
}

func RegisterInformanteWriteConflictServer(s grpc.ServiceRegistrar, srv InformanteWriteConflictServer) {
	s.RegisterService(&InformanteWriteConflict_ServiceDesc, srv)
}

func _InformanteWriteConflict_ReportWriteConflict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformanteConflictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformanteWriteConflictServer).ReportWriteConflict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InformanteWriteConflict_ReportWriteConflict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformanteWriteConflictServer).ReportWriteConflict(ctx, req.(*InformanteConflictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InformanteWriteConflict_ServiceDesc is the grpc.ServiceDesc for InformanteWriteConflict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformanteWriteConflict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker_service.InformanteWriteConflict",
	HandlerType: (*InformanteWriteConflictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportWriteConflict",
			Handler:    _InformanteWriteConflict_ReportWriteConflict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

const (
	VanguardiaReadConflict_ReportReadConflict_FullMethodName = "/broker_service.VanguardiaReadConflict/ReportReadConflict"
)

// VanguardiaReadConflictClient is the client API for VanguardiaReadConflict service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanguardiaReadConflictClient interface {
	ReportReadConflict(ctx context.Context, in *VanguardiaConflictRequest, opts ...grpc.CallOption) (*VanguardiaConflictReply, error)
}

type vanguardiaReadConflictClient struct {
	cc grpc.ClientConnInterface
}

func NewVanguardiaReadConflictClient(cc grpc.ClientConnInterface) VanguardiaReadConflictClient {
	return &vanguardiaReadConflictClient{cc}
}

func (c *vanguardiaReadConflictClient) ReportReadConflict(ctx context.Context, in *VanguardiaConflictRequest, opts ...grpc.CallOption) (*VanguardiaConflictReply, error) {
	out := new(VanguardiaConflictReply)
	err := c.cc.Invoke(ctx, VanguardiaReadConflict_ReportReadConflict_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanguardiaReadConflictServer is the server API for VanguardiaReadConflict service.
// All implementations must embed UnimplementedVanguardiaReadConflictServer
// for forward compatibility
type VanguardiaReadConflictServer interface {
	ReportReadConflict(context.Context, *VanguardiaConflictRequest) (*VanguardiaConflictReply, error)
	mustEmbedUnimplementedVanguardiaReadConflictServer()
}

// UnimplementedVanguardiaReadConflictServer must be embedded to have forward compatible implementations.
type UnimplementedVanguardiaReadConflictServer struct {
}

func (UnimplementedVanguardiaReadConflictServer) ReportReadConflict(context.Context, *VanguardiaConflictRequest) (*VanguardiaConflictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportReadConflict not implemented")
}
func (UnimplementedVanguardiaReadConflictServer) mustEmbedUnimplementedVanguardiaReadConflictServer() {
}

// UnsafeVanguardiaReadConflictServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanguardiaReadConflictServer will
// result in compilation errors.
type UnsafeVanguardiaReadConflictServer interface {
	mustEmbedUnimplementedVanguardiaReadConflictServer()
}

func RegisterVanguardiaReadConflictServer(s grpc.ServiceRegistrar, srv VanguardiaReadConflictServer) {
	s.RegisterService(&VanguardiaReadConflict_ServiceDesc, srv)
}

func _VanguardiaReadConflict_ReportReadConflict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VanguardiaConflictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanguardiaReadConflictServer).ReportReadConflict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VanguardiaReadConflict_ReportReadConflict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanguardiaReadConflictServer).ReportReadConflict(ctx, req.(*VanguardiaConflictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VanguardiaReadConflict_ServiceDesc is the grpc.ServiceDesc for VanguardiaReadConflict service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VanguardiaReadConflict_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker_service.VanguardiaReadConflict",
	HandlerType: (*VanguardiaReadConflictServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportReadConflict",
			Handler:    _VanguardiaReadConflict_ReportReadConflict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}

const (
	VanguardiaRequestBroker_EnemyInformationVanguardia_FullMethodName = "/broker_service.VanguardiaRequestBroker/EnemyInformationVanguardia"
)

// VanguardiaRequestBrokerClient is the client API for VanguardiaRequestBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanguardiaRequestBrokerClient interface {
	EnemyInformationVanguardia(ctx context.Context, in *EnemyRequestVanguardia, opts ...grpc.CallOption) (*EnemyReplyVanguardia, error)
}

type vanguardiaRequestBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewVanguardiaRequestBrokerClient(cc grpc.ClientConnInterface) VanguardiaRequestBrokerClient {
	return &vanguardiaRequestBrokerClient{cc}
}

func (c *vanguardiaRequestBrokerClient) EnemyInformationVanguardia(ctx context.Context, in *EnemyRequestVanguardia, opts ...grpc.CallOption) (*EnemyReplyVanguardia, error) {
	out := new(EnemyReplyVanguardia)
	err := c.cc.Invoke(ctx, VanguardiaRequestBroker_EnemyInformationVanguardia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanguardiaRequestBrokerServer is the server API for VanguardiaRequestBroker service.
// All implementations must embed UnimplementedVanguardiaRequestBrokerServer
// for forward compatibility
type VanguardiaRequestBrokerServer interface {
	EnemyInformationVanguardia(context.Context, *EnemyRequestVanguardia) (*EnemyReplyVanguardia, error)
	mustEmbedUnimplementedVanguardiaRequestBrokerServer()
}

// UnimplementedVanguardiaRequestBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedVanguardiaRequestBrokerServer struct {
}

func (UnimplementedVanguardiaRequestBrokerServer) EnemyInformationVanguardia(context.Context, *EnemyRequestVanguardia) (*EnemyReplyVanguardia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnemyInformationVanguardia not implemented")
}
func (UnimplementedVanguardiaRequestBrokerServer) mustEmbedUnimplementedVanguardiaRequestBrokerServer() {
}

// UnsafeVanguardiaRequestBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanguardiaRequestBrokerServer will
// result in compilation errors.
type UnsafeVanguardiaRequestBrokerServer interface {
	mustEmbedUnimplementedVanguardiaRequestBrokerServer()
}

func RegisterVanguardiaRequestBrokerServer(s grpc.ServiceRegistrar, srv VanguardiaRequestBrokerServer) {
	s.RegisterService(&VanguardiaRequestBroker_ServiceDesc, srv)
}

func _VanguardiaRequestBroker_EnemyInformationVanguardia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnemyRequestVanguardia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanguardiaRequestBrokerServer).EnemyInformationVanguardia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VanguardiaRequestBroker_EnemyInformationVanguardia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanguardiaRequestBrokerServer).EnemyInformationVanguardia(ctx, req.(*EnemyRequestVanguardia))
	}
	return interceptor(ctx, in, info, handler)
}

// VanguardiaRequestBroker_ServiceDesc is the grpc.ServiceDesc for VanguardiaRequestBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VanguardiaRequestBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker_service.VanguardiaRequestBroker",
	HandlerType: (*VanguardiaRequestBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnemyInformationVanguardia",
			Handler:    _VanguardiaRequestBroker_EnemyInformationVanguardia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker.proto",
}
